#!/usr/bin/env bash
set -e

cmd=$1
mount_path='<%= @backup_dir %>'
cmd_path='<%= @permitted_commands %>'
cmd_="${cmd_path}/${cmd}"
export zpr_rsync_cmd=$(cat $cmd_)
maintenance_mode='<%= @home %>/.maintenance_mode'

cmd_empty() {
  if [[ -z $cmd ]]
  then
    >&2 echo "No command was provided"
    exit 1
  fi
}

check_maintenance_mode() {
  if [[ -e $maintenance_mode ]]
  then
    >&2 echo "System is in maintenance mode"
    exit 4
  fi
}

mount_volume() {
  check_mount=$(sudo /bin/mount ${mount_path}/${cmd} > /dev/null 2>&1 ; echo $?)
  if [[ $check_mount -eq 32 ]]
  then
    >&2 echo "Requested volume is already mounted"
  elif [[ $check_mount -ne 0 ]]
  then
    >&2 echo "Cannot mount volume"
    exit 3
  fi
}

unmount_volume() {
  >&2 sudo /bin/umount ${mount_path}/${cmd}
}

path_is_nfs() {
  check_mount=$(stat -f -L -c %T ${mount_path}/${cmd} | sed 's/\///')
  if [[ $check_mount != 'nfs' ]]
  then
    >&2 echo "Requested volume is not mounted"
    exit 2
  fi
}

check_lockfile() {
  create_lock=$(lockfile-create -r 0 ${mount_path}/${cmd}/zpr_rsync &> /dev/null ; echo $?)
  if [[ $create_lock -ne 0 ]]
  then
    >&2 echo "A lock for $cmd exists"
    exit 3
  fi
}

run_cmd() {
  /bin/bash -c \
  "$(cat $cmd_ | tr -d '\\')"
}

remove_lock() {
  rm -f ${mount_path}/${cmd}/zpr_rsync.lock
}

check_if_exit_3() {
  if [[ $? -ne 3 ]]
  then
    remove_lock
  fi
}

main() {
  cmd_empty
  check_maintenance_mode
  mount_volume
  path_is_nfs
  check_lockfile
  run_cmd
  remove_lock
  unmount_volume
}

trap "remove_lock && unmount_volume ; exit 255" SIGINT SIGQUIT SIGTERM
trap "check_if_exit_3" EXIT

main
